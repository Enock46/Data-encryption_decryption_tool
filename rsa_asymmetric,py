from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import serialization, hashes

# Generate RSA key pair
def generate_key_pair():
    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048
    )
    public_key = private_key.public_key()
    return private_key, public_key

# Save private key to a file
def save_private_key(private_key, filename):
    pem = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.PKCS8,
        encryption_algorithm=serialization.NoEncryption()
    )
    with open(filename, "wb") as file:
        file.write(pem)

# Save public key to a file
def save_public_key(public_key, filename):
    pem = public_key.public_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PublicFormat.SubjectPublicKeyInfo
    )
    with open(filename, "wb") as file:
        file.write(pem)

# Load private key from a file
def load_private_key(filename):
    with open(filename, "rb") as file:
        pem = file.read()
    return serialization.load_pem_private_key(pem, password=None)

# Load public key from a file
def load_public_key(filename):
    with open(filename, "rb") as file:
        pem = file.read()
    return serialization.load_pem_public_key(pem)

# Encrypt a message using the public key
def encrypt_message(public_key, message):
    encrypted = public_key.encrypt(
        message.encode(),
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return encrypted

# Decrypt a message using the private key
def decrypt_message(private_key, encrypted_message):
    decrypted = private_key.decrypt(
        encrypted_message,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return decrypted.decode()

# Main example usage
if __name__ == "__main__":
    # Generate keys
    private_key, public_key = generate_key_pair()
    
    # Save keys to files
    save_private_key(private_key, "private_key.pem")
    save_public_key(public_key, "public_key.pem")
    
    # Load keys back
    loaded_private_key = load_private_key("private_key.pem")
    loaded_public_key = load_public_key("public_key.pem")
    
    # Encrypt a message
    message = "Hello, RSA Encryption!"
    encrypted_msg = encrypt_message(loaded_public_key, message)
    print("Encrypted message:", encrypted_msg)
    
    # Decrypt the message
    decrypted_msg = decrypt_message(loaded_private_key, encrypted_msg)
    print("Decrypted message:", decrypted_msg)
